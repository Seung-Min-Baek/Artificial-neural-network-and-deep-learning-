# -*- coding: utf-8 -*-
"""hw2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1miwBhnb5huaEHpKK4YKXahvjjfDmcg15

##Q1 & Q2
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/breast-cancer-wisconsin.data', header=None)

# 물음표 제거
df = df[~df.isin(['?']).any(axis=1)]

# 인덱스 리셋하기
df = df.reset_index(drop=True)

#첫째열 삭제
data = df.drop(columns=0, axis=1)

# input output 분리
input = data.iloc[:,0:9]
output = data.iloc[:,9:10]

# input preprocessing
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
print(scaler.fit(input))
norm_input = scaler.transform(input)
df3=pd.DataFrame(norm_input)

# output 값 변경
output.columns=['output']
output['output'] = output['output'].apply(lambda x: 0 if x == 2 else 1 if x == 4 else x)


# 데이터셋 분리
test_set = 100
val_set = 100

test_input = df3[:test_set]
test_output = output[:test_set]

val_input = df3[test_set:test_set + val_set]
val_output = output[test_set:test_set + val_set]

train_input = df3[test_set + val_set:]
train_output = output[test_set + val_set:]

# 모델 정의
from tensorflow.keras import models,layers
from tensorflow.keras import optimizers,losses,metrics
from tensorflow.keras.callbacks import EarlyStopping

model = models.Sequential()
model.add(layers.Dense(10,activation = 'relu', input_shape = (9,)))
model.add(layers.Dense(1,activation = 'sigmoid'))

# 모델 setup
model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),
              loss = losses.binary_crossentropy,
              metrics=[metrics.binary_accuracy])

# 모델 fitting
history = model.fit(train_input, train_output,
                   epochs= 200,batch_size = 10,
                   validation_data=(val_input, val_output),
                   callbacks=[EarlyStopping(monitor='val_loss',patience=2)])

# 모델 evaluation
test_loss,test_acc = model.evaluate(test_input,test_output)

print("Training loss:", history.history['loss'][-1])
print("Training accuracy:", history.history['binary_accuracy'][-1])
print('test_loss:',test_loss)
print('test_acc:',test_acc)

"""## Q3

"""

# 모델 정의
from tensorflow.keras import models,layers
from tensorflow.keras import optimizers,losses,metrics
from tensorflow.keras.callbacks import EarlyStopping

model = models.Sequential()
model.add(layers.Dense(10,activation = 'relu', input_shape = (9,)))
model.add(layers.Dense(1,activation = 'sigmoid'))


training_loss=[]
training_accuracy=[]
test_losses=[]
test_accs=[]

for i in range(10):

    # 모델 setup
    model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),
                  loss = losses.binary_crossentropy,
                  metrics=[metrics.binary_accuracy])

    # 모델 fitting
    history = model.fit(train_input, train_output,
                      epochs= 200,batch_size = 10,
                      validation_data=(val_input, val_output),
                      callbacks=[EarlyStopping(monitor='val_loss',patience=2)])

    # 모델 evaluation
    test_loss,test_acc = model.evaluate(test_input,test_output)

    training_loss.append(history.history['loss'][-1])
    training_accuracy.append(history.history['binary_accuracy'][-1])
    test_losses.append(test_loss)
    test_accs.append(test_acc)

arr_train_loss = np.array(training_loss)
arr_train_acc = np.array(training_accuracy)
arr_test_loss = np.array(test_losses)
arr_test_acc = np.array(test_accs)

# 평균과 표준편차 계산
mean_trloss = np.mean(arr_train_loss)
mean_tracc = np.mean(arr_train_acc)
mean_teloss = np.mean(arr_test_loss)
mean_teacc = np.mean(arr_test_acc)

std_trloss = np.std(arr_train_loss)
std_tracc = np.std(arr_train_acc)
std_teloss = np.std(arr_test_loss)
std_teacc = np.std(arr_test_acc)


print("mean_trloss : ",mean_trloss)
print("mean_tracc : ",mean_tracc)
print("mean_teloss : ",mean_teloss)
print("mean_teacc : ",mean_teacc)

print("std_trloss : ",std_trloss)
print("std_tracc : ",std_tracc)
print("std_teloss : ",std_teloss)
print("std_teacc : ",std_teacc)

"""##Q4"""

# 모델 정의
from tensorflow.keras import models,layers
from tensorflow.keras import optimizers,losses,metrics
from tensorflow.keras.callbacks import EarlyStopping

model = models.Sequential()
model.add(layers.Dense(2000,activation = 'relu', input_shape = (9,)))
model.add(layers.Dense(1,activation = 'sigmoid'))

training_loss=[]
training_accuracy=[]
test_losses=[]
test_accs=[]

for i in range(5):

    # 모델 setup
    model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),
                  loss = losses.binary_crossentropy,
                  metrics=[metrics.binary_accuracy])

    # 모델 fitting
    history = model.fit(train_input, train_output,
                      epochs= 200,batch_size = 10,
                      validation_data=(val_input, val_output),
                      callbacks=[EarlyStopping(monitor='val_loss',patience=2)])

    # 모델 evaluation
    test_loss,test_acc = model.evaluate(test_input,test_output)

    training_loss.append(history.history['loss'][-1])
    training_accuracy.append(history.history['binary_accuracy'][-1])
    test_losses.append(test_loss)
    test_accs.append(test_acc)

arr_train_loss = np.array(training_loss)
arr_train_acc = np.array(training_accuracy)
arr_test_loss = np.array(test_losses)
arr_test_acc = np.array(test_accs)

# 평균과 표준편차 계산
mean_trloss = np.mean(arr_train_loss)
mean_tracc = np.mean(arr_train_acc)
mean_teloss = np.mean(arr_test_loss)
mean_teacc = np.mean(arr_test_acc)

std_trloss = np.std(arr_train_loss)
std_tracc = np.std(arr_train_acc)
std_teloss = np.std(arr_test_loss)
std_teacc = np.std(arr_test_acc)


print("mean_trloss : ",mean_trloss)
print("mean_tracc : ",mean_tracc)
print("mean_teloss : ",mean_teloss)
print("mean_teacc : ",mean_teacc)

print("std_trloss : ",std_trloss)
print("std_tracc : ",std_tracc)
print("std_teloss : ",std_teloss)
print("std_teacc : ",std_teacc)

"""## Q E2"""

# 모델 정의
from tensorflow.keras import models,layers
from tensorflow.keras import optimizers,losses,metrics
from tensorflow.keras.callbacks import EarlyStopping

model = models.Sequential()
model.add(layers.Dense(1,activation = 'sigmoid', input_shape = (9,)))

# 모델 setup
model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),
              loss = losses.binary_crossentropy,
              metrics=[metrics.binary_accuracy])

# 모델 fitting
history = model.fit(train_input, train_output,
                   epochs= 200,batch_size = 10,
                   validation_data=(val_input, val_output),
                   callbacks=[EarlyStopping(monitor='val_loss',patience=2)])

# 모델 evaluation
test_loss,test_acc = model.evaluate(test_input,test_output)

# print("Training loss:", history.history['loss'][-1])
# print("Training accuracy:", history.history['binary_accuracy'][-1])
# print('test_loss:',test_loss)
# print('test_acc:',test_acc)

w = model.get_weights()[0]
b = model.get_weights()[1]

print("w:",w)
print("b:",b)
